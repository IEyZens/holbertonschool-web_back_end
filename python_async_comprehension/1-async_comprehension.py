#!/usr/bin/env python3
"""
This module provides a coroutine that uses asynchronous comprehension to
collect ten random floating-point numbers generated by the async_generator
function. The purpose is to demonstrate how to use async comprehensions to
iterate over asynchronous generators and collect their output efficiently.
"""

import typing
async_generator = __import__('0-async_generator').async_generator


async def async_comprehension() -> typing.List[float]:
    """
    Collects ten random floating-point numbers from the async_generator using
    an async comprehension and returns them as a list. This function shows how
    to gather values produced asynchronously into a single collection.
    """
    result = []
    async for value in async_generator():
        result.append(value)
    return result
